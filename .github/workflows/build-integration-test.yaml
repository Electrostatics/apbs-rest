name: Build APBS-REST Containers + Integration
on: 
  push:
    paths:
      - '.github/workflows/build-integration-test.yaml'
      - 'src/**'

      - 'utilities/wait_for_deployments.py'
      - 'tests/integration/**'
      - 'tests/requirements.txt'
      - 'charts/**'
      

jobs:
  build-images:
    name: Build All Images, Run Integration Tests
    runs-on: ubuntu-latest
    env:
      SHELL: /bin/bash
    steps:
    # - continue-on-error: false
    - name: Git checkout APBS-REST codebase
      uses: actions/checkout@v2

    - name: Install Minikube
      run: |
        curl -Lo minikube https://storage.googleapis.com/minikube/releases/v1.9.2/minikube-linux-amd64
        chmod +x minikube
        sudo mkdir -p /usr/local/bin/
        sudo install minikube /usr/local/bin/

    - name: Verify Minikube Installation and Start Cluster
      run: |
        which minikube
        minikube start --kubernetes-version='v1.15.1' --driver=docker
        minikube status
        minikube addons enable ingress

    - name: Enter Minikube's Docker Context
      # env:
      #   SHELL: /bin/bash
      run: |
        minikube docker-env
        eval $(minikube docker-env)

    # Build all the service containers given the current commit state
    # TODO: run all 'docker build' commands in parallel then 'wait' capture output after all are finished

    - name: 'Build Container: ID Service'
      working-directory: ./src/uid
      run: |
        eval $(minikube docker-env)
        docker build -t sample/apbs-uid .

    - name: 'Build Container: Storage Service'
      working-directory: ./src/storage
      run: |
        eval $(minikube docker-env)
        docker build -t sample/apbs-storage .

    - name: 'Build Container: Workflow Service'
      working-directory: ./src/v2_workflow
      run: |
        eval $(minikube docker-env)
        docker build -t sample/apbs-workflow .
      
    - name: 'Build Container: Task Service'
      working-directory: ./src/task
      run: |
        eval $(minikube docker-env)
        docker build -t sample/apbs-task .
    
    - name: 'Build Container: Proxy Service'
      working-directory: ./src/tesk/tesk_proxy
      run: |
        eval $(minikube docker-env)
        docker build -t sample/apbs-tesk-proxy .

    - name: 'Build Container: Visualization Service'
      working-directory: ./src/visualizer-legacy
      run: |
        eval $(minikube docker-env)
        docker build -t sample/apbs-viz-legacy .
      
    - name: 'Build Container: Autofill Service'
      working-directory: ./src/autofill
      run: |
        cp ../pdb2pqr_build_materials/apbs_cgi.py .
        eval $(minikube docker-env)
        docker build -t sample/apbs-autofill .

    - name: 'Build Container: Uploader'
      working-directory: ./src/runner/uploader
      run: |
        eval $(minikube docker-env)
        docker build -t sample/apbs-uploader -f uploader.dockerfile .

        echo "Check directories in uploader"
        docker run --rm --entrypoint sh sample/apbs-uploader -c "pwd; ls -la; echo; cd ..; pwd; ls -la"

    - name: 'Build Container: Downloader'
      working-directory: ./src/runner/downloader
      run: |
        eval $(minikube docker-env)
        docker build -t sample/apbs-downloader -f downloader.dockerfile .

        echo "Check directories in downloader"
        docker run --rm --entrypoint sh sample/apbs-downloader -c "pwd; ls -la; echo; cd ..; pwd; ls -la"

    - name: 'Build Container: APBS Runner'
      working-directory: ./src/tesk/tesk_execution
      run: |
        eval $(minikube docker-env)
        docker build -t apbs-bin -f apbs-bin.dockerfile .

    - name: 'Build Container: PDB2PQR Runner'
      working-directory: ./src/tesk/tesk_execution
      run: |
        cp ../../pdb2pqr_build_materials/main.py .
        eval $(minikube docker-env)
        docker build -t pdb2pqr-bin:source -f pdb2pqr-bin-source.dockerfile .
        rm main.py

    - name: 'Check Docker Images in Minikube'
      run: |
        eval $(minikube docker-env)
        docker images

    # Install via Helm and run integration tests
    - name: Verify Helm Installation
      run: |
        which helm
        helm version

    - name: Install APBS-REST via Helm
      run: |
        helm install apbs-rest charts/apbs-rest \
          -f tests/integration/config/github-actions-values.yaml \
          --set ingress.enabled=true,ingress.hosts[0]=apbs.$(minikube ip).nip.io

    - name: Wait for deployments
      run: |
        python3 utilities/wait_for_deployments.py 30 10

    - name: Describe pods within Installation
      run: |
        kubectl get pods
        kubectl get pods --no-headers=true | awk '/apbs-rest/{print $1}' | xargs kubectl describe pod

    - name: Install PyTest and other Python dependencies
      working-directory: ./tests
      run: |
        python3 -m pip install --upgrade pip
        sudo apt install python3-venv
        python3 -m venv venv
        source venv/bin/activate
        which pip
        pip install -r requirements.txt

    - name: Run tests
      working-directory: ./tests/integration
      run: |
        source ../venv/bin/activate
        APBS_HOST=apbs.$(minikube ip).nip.io pytest -n 3
        
    - name: Describe job pods upon PyTest failure
      if: ${{ failure() }}
      run: |
        kubectl get pods

        printf "\nDownloader Log \n"
        kubectl get pods --no-headers=true | awk '/task-(.*)-(apbs|pdb)/{print $1}' | xargs -L 1 kubectl logs -c apbs-rest-downloader 
        
        printf "\nExecution  Log \n"
        kubectl get pods --no-headers=true | awk '/task-(.*)-(apbs|pdb)/{print $1}' | xargs -L 1 kubectl logs -c apbs-executor
        
        printf "\nUploader Log \n"
        kubectl get pods --no-headers=true | awk '/task-(.*)-(apbs|pdb)/{print $1}' | xargs -L 1 kubectl logs -c apbs-rest-uploader

        printf "\nPod Description \n"
        kubectl get pods --no-headers=true | awk '/task-(.*)-(apbs|pdb)/{print $1}' | xargs kubectl describe pod

    - name: PyTest failure - Get ID Service logs
      if: ${{ failure() }}
      run: |
        kubectl get pods

        printf "\nID Service Log \n"
        kubectl get pods --no-headers=true | awk '/apbs-rest-id/{print $1}' | xargs -L 1 kubectl logs 

    - name: PyTest failure - Get Storage Service logs
      if: ${{ failure() }}
      run: |
        kubectl get pods

        printf "\nStorage Service Log \n"
        kubectl get pods --no-headers=true | awk '/apbs-rest-storage/{print $1}' | xargs -L 1 kubectl logs 

    - name: PyTest failure - Get Proxy Service logs
      if: ${{ failure() }}
      run: |
        kubectl get pods

        printf "\nProxy Service Log \n"
        kubectl get pods --no-headers=true | awk '/apbs-rest-proxy/{print $1}' | xargs -L 1 kubectl logs 

    - name: PyTest failure - Get Task Service logs
      if: ${{ failure() }}
      run: |
        kubectl get pods

        printf "\nTask Service Log \n"
        kubectl get pods --no-headers=true | awk '/apbs-rest-task/{print $1}' | xargs -L 1 kubectl logs 

    - name: PyTest failure - Get Workflow Service logs
      if: ${{ failure() }}
      run: |
        kubectl get pods

        printf "\nWorkflow Service Log \n"
        kubectl get pods --no-headers=true | awk '/apbs-rest-workflow/{print $1}' | xargs -L 1 kubectl logs 

    - name: PyTest failure - Get Autofill Service logs
      if: ${{ failure() }}
      run: |
        kubectl get pods

        printf "\nAutofill Service Log \n"
        kubectl get pods --no-headers=true | awk '/apbs-rest-autofill/{print $1}' | xargs -L 1 kubectl logs 

    - name: PyTest failure - Get Visualizer Service logs
      if: ${{ failure() }}
      run: |
        kubectl get pods

        printf "\nVisualizer Service Log \n"
        kubectl get pods --no-headers=true | awk '/apbs-rest-viz/{print $1}' | xargs -L 1 kubectl logs 

    - name: PyTest failure - Get UI Service logs
      if: ${{ failure() }}
      run: |
        kubectl get pods

        printf "\nUI Service Log \n"
        kubectl get pods --no-headers=true | awk '/apbs-rest-ui/{print $1}' | xargs -L 1 kubectl logs 

    - name: PyTest failure - Get Minio logs
      if: ${{ failure() }}
      run: |
        kubectl get pods

        printf "\nMinIO Log \n"
        kubectl get pods --no-headers=true | awk '/apbs-rest-minio/{print $1}' | xargs -L 1 kubectl logs 
